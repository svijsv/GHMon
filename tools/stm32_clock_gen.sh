#!/bin/sh
# A tool for generating the PLL clock-determination header for non-F1 line
# STM32s
#
# These devices have three relevent prescalers:
#    PLLM is used to divide the source so that it's 1-2MHz when fed to VCO
#    PLLN is used to multiply the VCO input so that it's 192-432MHz,
#    100-432MHz, or 50-432MHz (depending on the device) when fed to the PLL
#    PLLP is used to divide the PLL output
#
# Splitting the output into three separate files reduces their collective size
# from ~21MB (with the HCLK prescalers handled in the calling code, ~130MB
# otherwise) to ~150KB and greatly reduces compile time and memory usage
#

# These should be the min/max values for all supported architectures, they'll
# be further refined by the caller
PLLM_MIN=2
PLLM_MAX=63
#PLLN_MIN=100
PLLN_MIN=192
PLLN_MAX=432

# List of possible HCLK input prescalers
HCLK_PSC="1 2 4 8 16 64 128 256 512"
# List of possible PLL output prescalers
PLLP_PSC="2 4 6 8"

if [ -z "${1}" ] || [ -e "${1}" ] || [ -z "${2}" ] || [ -e "${2}" ] || [ -z "${3}" ] || [ -e "${3}" ]; then
	echo "Usage: ${0} <header 1> <header 2> <header 3>" >&2
	echo "The header files must not already exist." >&2
	exit 1
fi
LOOP_1="${1}"
LOOP_2="${2}"
LOOP_3="${3}"

cat >>"${LOOP_3}" <<-EOF
/*
* This file was generated by ${0} on $(date)
*/

EOF
cat >>"${LOOP_2}" <<-EOF
/*
* This file was generated by ${0} on $(date)
*/

EOF
cat >>"${LOOP_1}" <<-EOF
/*
* This file was generated by ${0} on $(date)
*
* Attempt to generate prescaler values for STM32Fx devices (excluding the F1s)
* Supports PLLN ranging from ${PLLN_MIN}-${PLLN_MAX} and PLLM from ${PLLM_MIN}-${PLLM_MAX}
*
* FREQ_INPUT_HZ must be set to the frequency of the source oscillator
* FREQ_OUTPUT_HZ must be set to the desired frequency of the system clock (HCLK)
*
* VCO_INPUT_{MIN,MAX}_HZ must be set to the minimum/maximum speeds of the VCO input
* VCO_OUTPUT_{MIN,MAX}_HZ must be set to the minimum/maximum speeds of the VCO output
* PLLM_{MIN,MAX} must be set to the minimum/maximum values of the PLLM prescaler
* PLLN_{MIN,MAX} must be set to the minimum/maximum values of the PLLN prescaler
* The above values can be found in the reference manual
*
* If successful:
*    PLLM is set to the value of the PLLM prescaler
*    PLLN is set to the value of the PLLN prescaler
*    PLLP is set to PLLP_DIV_{${PLLP_PSC}}, which are caller-defined
*    PLLP_DIV is set to {${PLLP_PSC}}
*    PLL_OUTPUT_HZ is set to the PLL output frequency
*    HCLK_DIV is set to {${HCLK_PSC}}
*    VCO_{INPUT,OUTPUT}_HZ are set to the VCO input/output frequencies
*
* If unsuccessful, PLLP is not set.
*/
#if !defined(FREQ_INPUT_HZ)
# error "FREQ_INPUT_HZ must be defined"
#endif
#if ! defined(FREQ_OUTPUT_HZ)
# error "FREQ_OUTPUT_HZ must be defined"
#endif
#if ! defined(VCO_INPUT_MAX_HZ)
# error "VCO_INPUT_MAX_HZ must be defined"
#endif
#if ! defined(VCO_INPUT_MIN_HZ)
# error "VCO_INPUT_MIN_HZ must be defined"
#endif
#if ! defined(VCO_OUTPUT_MAX_HZ)
# error "VCO_OUTPUT_MAX_HZ must be defined"
#endif
#if ! defined(VCO_OUTPUT_MIN_HZ)
# error "VCO_OUTPUT_MIN_HZ must be defined"
#endif
#if ! defined(PLLM_MIN)
# error "PLLM_MIN must be defined"
#endif
#if ! defined(PLLM_MAX)
# error "PLLM_MAX must be defined"
#endif
#if ! defined(PLLN_MIN)
# error "PLLN_MIN must be defined"
#endif
#if ! defined(PLLN_MAX)
# error "PLLN_MAX must be defined"
#endif


#define PLLP_IGNORE 0xFF

// Per the reference manual VCO input should be close to 2 to minimize
// jitter so start high and work down
#undef PLLM
#define PLLM (FREQ_INPUT_HZ/VCO_INPUT_MAX_HZ)
#if PLLM < PLLM_MIN
# undef PLLM
# define PLLM PLLM_MIN
#endif

EOF

for m in $(seq ${PLLM_MIN} ${PLLM_MAX}); do
	cat <<-EOF
	#if (PLLM == ${m}) && (!defined(PLLP_DIV)) && (PLLM <= PLLM_MAX)
	# undef  VCO_INPUT_HZ
	# define VCO_INPUT_HZ (FREQ_INPUT_HZ / PLLM)
	# if VCO_INPUT_HZ < VCO_INPUT_MIN_HZ
	#  define PLLP_DIV PLLP_IGNORE
	# endif
	# undef PLLN
	# define PLLN (VCO_OUTPUT_MIN_HZ / VCO_INPUT_HZ)
	# if PLLN < PLLN_MIN
	#  undef  PLLN
	#  define PLLN PLLN_MIN
	# endif
	# include "${LOOP_2##*/}"
	# if ! defined(PLLP_DIV)
	#  undef  PLLM
	#  define PLLM ($((m+1)))
	# endif
	#endif // PLLM == ${m}

	EOF
done >>"${LOOP_1}"

for n in $(seq ${PLLN_MIN} ${PLLN_MAX}); do
	cat <<-EOF
	#if (PLLN == ${n}) && (!defined(PLLP_DIV)) && (PLLN <= PLLN_MAX)
	# undef  VCO_OUTPUT_HZ
	# define VCO_OUTPUT_HZ (VCO_INPUT_HZ * PLLN)
	# if VCO_OUTPUT_HZ > VCO_OUTPUT_MAX_HZ
	#  undef  PLLN
	#  define PLLN (PLLN_MAX + 1)
	# else
	#  include "${LOOP_3##*/}"
	#  if ! defined(PLLP_DIV)
	#   undef  PLLN
	#   define PLLN ($((n+1)))
	#  endif
	# endif
	#endif // PLLN == ${n}

	EOF
done >>"${LOOP_2}"

# Loop over the hclk dividers before the PLLP dividers so that input
# clock is as low as it can be
for i in ${HCLK_PSC}; do
	for p in ${PLLP_PSC}; do
		cat <<-EOF
		#if !defined(PLLP_DIV)
		# undef PLL_OUTPUT_HZ
		# define PLL_OUTPUT_HZ (VCO_OUTPUT_HZ / ${p})
		# if (PLL_OUTPUT_HZ >= PLL_OUTPUT_MIN_HZ) && (PLL_OUTPUT_HZ == (FREQ_OUTPUT_HZ * ${i}))
		#  define PLLP_DIV ${p}
		#  define HCLK_DIV ${i}
		# endif // PLLP_DIV == ${p}
		#endif

		EOF
	done >>"${LOOP_3}"
done

cat >>"${LOOP_1}" <<-EOF
#if PLLP_DIV == PLLP_IGNORE
# undef PLLP_DIV
#endif
#if defined(PLLP_DIV)
# if PLLP_DIV == 2
#  define PLLP PLLP_DIV_2
# elif PLLP_DIV == 4
#  define PLLP PLLP_DIV_4
# elif PLLP_DIV == 6
#  define PLLP PLLP_DIV_6
# elif PLLP_DIV == 8
#  define PLLP PLLP_DIV_8
# else
#  error "Unhandled PLLP value"
# endif
#endif

#undef PLLP_IGNORE
// Might as well keep this if we're keeping the rest
//#undef PLLP_DIV
// This is useful for setting the oscillator frequency
//#undef PLL_OUTPUT_HZ
// These are used in the definitions of the register values so keep them
//#undef VCO_OUTPUT_HZ
//#undef VCO_INPUT_HZ
EOF
